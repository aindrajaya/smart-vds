const vulnerabilityDetectors = require('./utils/vulnerabilityDetectors')
const db = require('./utils/databaseUtils')
const chalk = require('chalk')
const { vulnerabilities } = require('./const/vulnerabilities')

module.exports = {
  // Scanner function that runs all vulnerability detectors for a given parse tree
  vulnerabilityScanner: async (parseTree) => {
    try {
      const vulnerabilitiesDetected = []
      const isConnected = await db.isDbConnected()

      if (isConnected) {
        // Unchecked Call Return Value
        const uncheckedCallReturnValuePatterns = await db.retrievePatterns(vulnerabilities.UNCHECKED_CALL_RETURN_VALUE)
        const uncheckedCallReturnValue = await vulnerabilityDetectors.detectUncheckedCallReturnValue(parseTree, uncheckedCallReturnValuePatterns)

        if (uncheckedCallReturnValue[0] === true) {
          vulnerabilitiesDetected.push([vulnerabilities.UNCHECKED_CALL_RETURN_VALUE, uncheckedCallReturnValue[1]])
        }
      }
      // Display count and details of vulnerabilities found
      console.log('Types of Vulnerabilities Detected: ', vulnerabilitiesDetected.length)
      console.log('Vulnerabilities: ')
      for (let i = 0; i < vulnerabilitiesDetected.length; i++) {
        console.log(vulnerabilitiesDetected[i][0] + ': ', vulnerabilitiesDetected[i][1].length)
        // console.log(vulnerabilitiesDetected[i][1])
      }

      // Will move close db connection to generate report function in Round 3.
      await db.closeDbConnection()
      console.log(chalk.greenBright('Scan complete.'))
    } catch (e) {
      console.log(chalk.red(e))
    }
  }
}
